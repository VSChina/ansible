#!/usr/bin/python
#
# Copyright (C) 2019 Jeffrey Cline
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_frontdoor
version_added: "2.9"
short_description: Manage Azure FrontDoor instance.
description:
    - Create, update and delete instance of Azure Front Door.

options:
    resource_group:
        description:
        - Name of the Resource group within the Azure subscription.
        required: true
        type: str
    name:
        description:
        - Name of the Front Door which is globally unique.
        required: true
        type: str
    location:
        description:
        - Resource location.
        type: str
    backend_pools:
        description:
        - Backend pools available to routing rules.
        type: list
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            backends:
                description:
                - The set of backends for this pool.
                type: dict
                suboptions:
                    address:
                        description:
                        - Location of the backend (IP address or FQDN).
                        type: str
                    http_port:
                        description:
                        - The HTTP TCP port number. Must be between 1 and 65535.
                        type: int
                    https_port:
                        description:
                        - The HTTPS TCP port number. Must be between 1 and 65535.
                        type: int
                    enabled_state:
                        description:
                        - Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'.
                        default: enabled
                        type: str
                        choices:
                        - enabled
                        - disabled
                    priority:
                        description:
                        - Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
                        type: int
                    weight:
                        description:
                        - Weight of this endpoint for load balancing purposes.
                        type: int
                    backend_host_header:
                        description:
                        - The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
                        type: str
            load_balancing_settings:
                description:
                - Load balancing settings for a backend pool.
                type: dict
                suboptions:
                    id:
                        description:
                        - Resource ID.
                        type: str
            health_probe_settings:
                description:
                - L7 health probe settings for a backend pool.
                type: dict
                suboptions:
                    id:
                        description:
                        - Resource ID.
                        type: str
            resource_state:
                description:
                - Resource status.
                default: creating
                type: str
                choices:
                - creating
                - enabling
                - enabled
                - disabling
                - disabled
                - deleting
            name:
                description:
                - Resource name.
                type: str
    backend_pools_settings:
        description:
        - Settings for all backendPools.
        type: dict
        suboptions:
            enforce_certificate_name_check:
                description:
                - Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
                default: enabled
                type: str
                choices:
                - enabled
                - disabled
    enabled_state:
        description:
        - Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'.
        default: enabled
        type: str
        choices:
        - enabled
        - disabled
    friendly_name:
        description:
        - A friendly name for the frontDoor.
        type: str
    frontend_endpoints:
        description:
        - Frontend endpoints available to routing rules.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            host_name:
                description:
                - The host name of the frontendEndpoint. Must be a domain name.
                type: str
            session_affinity_enabled_state:
                description:
                - Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'.
                default: enabled
                type: str
                choices:
                - enabled
                - disabled
            session_affinity_ttl_seconds:
                description:
                - UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
                type: int
            web_application_firewall_policy_link:
                description:
                - Defines the Web Application Firewall policy for each host (if applicable).
                type: dict
                suboptions:
                    id:
                        description:
                        - Resource ID.
                        type: str
            resource_state:
                description:
                - Resource status.
                default: creating
                type: str
                choices:
                - creating
                - enabling
                - enabled
                - disabling
                - disabled
                - deleting
            name:
                description:
                - Resource name.
                type: str
    health_probe_settings:
        description:
        - Health probe settings associated with this Front Door instance.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            path:
                description:
                - The path to use for the health probe. Default is /.
                type: str
            protocol:
                description:
                - Protocol scheme to use for this probe.
                default: http
                type: str
                choices:
                - http
                - https
            interval_in_seconds:
                description:
                - The number of seconds between health probes.
                type: int
            resource_state:
                description:
                - Resource status.
                default: creating
                type: str
                choices:
                - creating
                - enabling
                - enabled
                - disabling
                - disabled
                - deleting
            name:
                description:
                - Resource name.
                type: str
    load_balancing_settings:
        description:
        - Load balancing settings associated with this Front Door instance.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            sample_size:
                description:
                - The number of samples to consider for load balancing decisions.
                type: int
            successful_samples_required:
                description:
                - The number of samples within the sample period that must succeed.
                type: int
            additional_latency_milliseconds:
                description:
                - The additional latency in milliseconds for probes to fall into the lowest latency bucket.
                type: int
            resource_state:
                description:
                - Resource status.
                default: creating
                type: str
                choices:
                - creating
                - enabling
                - enabled
                - disabling
                - disabled
                - deleting
            name:
                description:
                - Resource name.
                type: str
    resource_state:
        description:
        - Resource status of the Front Door.
        default: creating
        type: str
        choices:
        - creating
        - enabling
        - enabled
        - disabling
        - disabled
        - deleting
    routing_rules:
        description:
        - Routing rules associated with this Front Door.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            frontend_endpoints:
                description:
                - Frontend endpoints associated with this rule.
                type: dict
                suboptions:
                    id:
                        description:
                        - Resource ID.
                        type: str
            accepted_protocols:
                description:
                - Protocol schemes to match for this rule.
                default: http
                type: str
                choices:
                - http
                - https
            patterns_to_match:
                description:
                - The route patterns of the rule.
                type: str
            enabled_state:
                description:
                - Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
                default: enabled
                type: str
                choices:
                - enabled
                - disabled
            resource_state:
                description:
                - Resource status.
                default: creating
                type: str
                choices:
                - creating
                - enabling
                - enabled
                - disabling
                - disabled
                - deleting
            name:
                description:
                - Resource name.
                type: str
    state:
        description:
        - Assert the state of the Front Door.
        - Use 'present' to create or update a Front Door and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure
    - azure_tags

author:
    - "Jeffrey Cline"
'''


RETURN = '''
provisioning_state:
    description:
    - Provisioning state of the Front Door.
    returned: always
    type: str
cname:
    description:
    - The host that each frontendEndpoint must CNAME to.
    returned: always
    type: str
id:
    description:
    - Resource ID.
    returned: always
    type: str
type:
    description:
    - Resource type.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import normalize_location_name
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.frontdoor import FrontdoorClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMFrontDoor(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Front Door resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            location=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            backend_pools=dict(
                type='list',
                elements='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    backends=dict(
                        type='dict',
                        options=dict(
                            address=dict(
                                type='str'
                            ),
                            http_port=dict(
                                type='int'
                            ),
                            https_port=dict(
                                type='int'
                            ),
                            enabled_state=dict(
                                default='enabled',
                                type='str',
                                choices=['enabled', 'disabled']
                            ),
                            priority=dict(
                                type='int'
                            ),
                            weight=dict(
                                type='int'
                            ),
                            backend_host_header=dict(
                                type='str'
                            )
                        )
                    ),
                    load_balancing_settings=dict(
                        type='dict',
                        options=dict(
                            id=dict(
                                type='str'
                            )
                        )
                    ),
                    health_probe_settings=dict(
                        type='dict',
                        options=dict(
                            id=dict(
                                type='str'
                            )
                        )
                    ),
                    resource_state=dict(
                        default='creating',
                        type='str',
                        choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            backend_pools_settings=dict(
                type='dict',
                options=dict(
                    enforce_certificate_name_check=dict(
                        default='enabled',
                        type='str',
                        choices=['enabled', 'disabled']
                    )
                )
            ),
            enabled_state=dict(
                default='enabled',
                type='str',
                choices=['enabled', 'disabled']
            ),
            friendly_name=dict(
                type='str'
            ),
            frontend_endpoints=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    host_name=dict(
                        type='str'
                    ),
                    session_affinity_enabled_state=dict(
                        default='enabled',
                        type='str',
                        choices=['enabled', 'disabled']
                    ),
                    session_affinity_ttl_seconds=dict(
                        type='int'
                    ),
                    web_application_firewall_policy_link=dict(
                        type='dict',
                        options=dict(
                            id=dict(
                                type='str'
                            )
                        )
                    ),
                    resource_state=dict(
                        default='creating',
                        type='str',
                        choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            health_probe_settings=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    path=dict(
                        type='str'
                    ),
                    protocol=dict(
                        default='http',
                        type='str',
                        choices=['http', 'https']
                    ),
                    interval_in_seconds=dict(
                        type='int'
                    ),
                    resource_state=dict(
                        default='creating',
                        type='str',
                        choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            load_balancing_settings=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    sample_size=dict(
                        type='int'
                    ),
                    successful_samples_required=dict(
                        type='int'
                    ),
                    additional_latency_milliseconds=dict(
                        type='int'
                    ),
                    resource_state=dict(
                        default='creating',
                        type='str',
                        choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            resource_state=dict(
                default='creating',
                type='str',
                choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
            ),
            routing_rules=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    frontend_endpoints=dict(
                        type='dict',
                        options=dict(
                            id=dict(
                                type='str'
                            )
                        )
                    ),
                    accepted_protocols=dict(
                        default='http',
                        type='str',
                        choices=['http', 'https']
                    ),
                    patterns_to_match=dict(
                        type='str'
                    ),
                    enabled_state=dict(
                        default='enabled',
                        type='str',
                        choices=['enabled', 'disabled']
                    ),
                    resource_state=dict(
                        default='creating',
                        type='str',
                        choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.name = None
        self.front_door_parameters = dict()
        self.tags = None

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMFrontDoor, self).__init__(derived_arg_spec=self.module_arg_spec,
                                               supports_check_mode=True,
                                               supports_tags=True)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.front_door_parameters[key] = kwargs[key]

        resource_group = self.get_resource_group(self.resource_group)
        if self.front_door_parameters.get('location') is None:
            self.front_door_parameters['location'] = resource_group.location
        if self.front_door_parameters.get('backend_pools') is not None:
            if self.front_door_parameters['backend_pools'].get('backends') is not None:
                self.front_door_parameters['backend_pools']['backends']['enabled_state'] = _snake_to_camel(self.front_door_parameters['backend_pools']['backends']['enabled_state'], True)
            self.front_door_parameters['backend_pools']['resource_state'] = _snake_to_camel(self.front_door_parameters['backend_pools']['resource_state'], True)
        if self.front_door_parameters.get('backend_pools_settings') is not None:
            self.front_door_parameters['backend_pools_settings']['enforce_certificate_name_check'] = _snake_to_camel(self.front_door_parameters['backend_pools_settings']['enforce_certificate_name_check'], True)
        self.front_door_parameters['enabled_state'] = _snake_to_camel(self.front_door_parameters['enabled_state'], True)
        if self.front_door_parameters.get('frontend_endpoints') is not None:
            self.front_door_parameters['frontend_endpoints']['session_affinity_enabled_state'] = _snake_to_camel(self.front_door_parameters['frontend_endpoints']['session_affinity_enabled_state'], True)
            self.front_door_parameters['frontend_endpoints']['resource_state'] = _snake_to_camel(self.front_door_parameters['frontend_endpoints']['resource_state'], True)
        if self.front_door_parameters.get('health_probe_settings') is not None:
            self.front_door_parameters['health_probe_settings']['protocol'] = _snake_to_camel(self.front_door_parameters['health_probe_settings']['protocol'], True)
            self.front_door_parameters['health_probe_settings']['resource_state'] = _snake_to_camel(self.front_door_parameters['health_probe_settings']['resource_state'], True)
        if self.front_door_parameters.get('load_balancing_settings') is not None:
            self.front_door_parameters['load_balancing_settings']['resource_state'] = _snake_to_camel(self.front_door_parameters['load_balancing_settings']['resource_state'], True)
        self.front_door_parameters['resource_state'] = _snake_to_camel(self.front_door_parameters['resource_state'], True)
        if self.front_door_parameters.get('routing_rules') is not None:
            self.front_door_parameters['routing_rules']['accepted_protocols'] = _snake_to_camel(self.front_door_parameters['routing_rules']['accepted_protocols'], True)
            self.front_door_parameters['routing_rules']['enabled_state'] = _snake_to_camel(self.front_door_parameters['routing_rules']['enabled_state'], True)
            self.front_door_parameters['routing_rules']['resource_state'] = _snake_to_camel(self.front_door_parameters['routing_rules']['resource_state'], True)

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(FrontdoorClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_frontdoor()

        if not old_response:
            self.log("Front Door instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Front Door instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.front_door_parameters
                if not self.idempotency_check(old_response, self.front_door_parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Front Door instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_frontdoor()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Front Door instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_frontdoor()
        else:
            self.log("Front Door instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'provisioning_state': response.get('provisioning_state', None),
                'cname': response.get('cname', None),
                'id': response.get('id', None),
                'type': response.get('type', None)
            })
        return self.results

    def create_update_frontdoor(self):
        '''
        Creates or updates Front Door with the specified configuration.

        :return: deserialized Front Door instance state dictionary
        '''
        self.log("Creating / Updating the Front Door instance {0}".format(self.name))

        try:
            response = self.mgmt_client.front_doors.create_or_update(resource_group_name=self.resource_group,
                                                                     front_door_name=self.name,
                                                                     front_door_parameters=self.front_door_parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Front Door instance.')
            self.fail("Error creating the Front Door instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_frontdoor(self):
        '''
        Deletes specified Front Door instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Front Door instance {0}".format(self.name))
        try:
            response = self.mgmt_client.front_doors.delete(resource_group_name=self.resource_group,
                                                           front_door_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Front Door instance.')
            self.fail("Error deleting the Front Door instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_frontdoor(self):
        '''
        Gets the properties of the specified Front Door
        :return: deserialized Front Door instance state dictionary
        '''
        self.log("Checking if the Front Door instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.front_doors.get(resource_group_name=self.resource_group,
                                                        front_door_name=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Front Door instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Front Door instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMFrontDoor()


if __name__ == '__main__':
    main()
