#!/usr/bin/python
#
# Copyright (C) 2019 audevbot
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_loadbalancingsetting
version_added: "2.9"
short_description: Manage Azure LoadBalancingSetting instance.
description:
    - Create, update and delete instance of Azure Load Balancing Setting.

options:
    id:
        description:
        - Resource ID.
        type: str
    resource_group:
        description:
        - Name of the Resource group within the Azure subscription.
        required: true
        type: str
    name:
        description:
        - Resource name.
        type: str
    additional_latency_milliseconds:
        description:
        - The additional latency in milliseconds for probes to fall into the lowest latency bucket.
        type: int
    front_door_name:
        description:
        - Name of the Front Door which is globally unique.
        required: true
        type: str
    resource_state:
        description:
        - Resource status.
        default: creating
        type: str
        choices:
        - creating
        - enabling
        - enabled
        - disabling
        - disabled
        - deleting
    sample_size:
        description:
        - The number of samples to consider for load balancing decisions.
        type: int
    successful_samples_required:
        description:
        - The number of samples within the sample period that must succeed.
        type: int
    state:
        description:
        - Assert the state of the Load Balancing Setting.
        - Use 'present' to create or update a Load Balancing Setting and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure

author:
    - audevbot
'''


RETURN = '''
type:
    description:
    - Resource type.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.frontdoor import FrontdoorClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMLoadBalancingSetting(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Load Balancing Setting resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            id=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            name=dict(
                type='str'
            ),
            additional_latency_milliseconds=dict(
                type='int'
            ),
            front_door_name=dict(
                required=True,
                type='str',
                updatable=False,
                disposition='/'
            ),
            resource_state=dict(
                default='creating',
                type='str',
                choices=['creating', 'enabling', 'enabled', 'disabling', 'disabled', 'deleting']
            ),
            sample_size=dict(
                type='int'
            ),
            successful_samples_required=dict(
                type='int'
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.front_door_name = None
        self.name = None
        self.load_balancing_settings_parameters = dict()

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMLoadBalancingSetting, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                          supports_check_mode=True,
                                                          supports_tags=False)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()):
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.load_balancing_settings_parameters[key] = kwargs[key]

        self.load_balancing_settings_parameters['resource_state'] = _snake_to_camel(self.load_balancing_settings_parameters['resource_state'], True)

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(FrontdoorClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_loadbalancingsetting()

        if not old_response:
            self.log("Load Balancing Setting instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Load Balancing Setting instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.load_balancing_settings_parameters
                if not self.idempotency_check(old_response, self.load_balancing_settings_parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Load Balancing Setting instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_loadbalancingsetting()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Load Balancing Setting instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_loadbalancingsetting()
        else:
            self.log("Load Balancing Setting instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'type': response.get('type', None)
            })
        return self.results

    def create_update_loadbalancingsetting(self):
        '''
        Creates or updates Load Balancing Setting with the specified configuration.

        :return: deserialized Load Balancing Setting instance state dictionary
        '''
        self.log("Creating / Updating the Load Balancing Setting instance {0}".format(self.name))

        try:
            response = self.mgmt_client.load_balancing_settings.create_or_update(resource_group_name=self.resource_group,
                                                                                 front_door_name=self.front_door_name,
                                                                                 load_balancing_settings_name=self.name,
                                                                                 load_balancing_settings_parameters=self.load_balancing_settings_parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Load Balancing Setting instance.')
            self.fail("Error creating the Load Balancing Setting instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_loadbalancingsetting(self):
        '''
        Deletes specified Load Balancing Setting instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Load Balancing Setting instance {0}".format(self.name))
        try:
            response = self.mgmt_client.load_balancing_settings.delete(resource_group_name=self.resource_group,
                                                                       front_door_name=self.front_door_name,
                                                                       load_balancing_settings_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Load Balancing Setting instance.')
            self.fail("Error deleting the Load Balancing Setting instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_loadbalancingsetting(self):
        '''
        Gets the properties of the specified Load Balancing Setting
        :return: deserialized Load Balancing Setting instance state dictionary
        '''
        self.log("Checking if the Load Balancing Setting instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.load_balancing_settings.get(resource_group_name=self.resource_group,
                                                                    front_door_name=self.front_door_name,
                                                                    load_balancing_settings_name=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Load Balancing Setting instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Load Balancing Setting instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMLoadBalancingSetting()


if __name__ == '__main__':
    main()
