#!/usr/bin/python
#
# Copyright (C) 2019 audevbot
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_webapplicationfirewallpolicy
version_added: "2.9"
short_description: Manage Azure WebApplicationFirewallPolicy instance.
description:
    - Create, update and delete instance of Azure Web Application Firewall Policy.

options:
    resource_group:
        description:
        - The name of the resource group.
        required: true
        type: str
    name:
        description:
        - The name of the policy.
        required: true
        type: str
    location:
        description:
        - Resource location.
        type: str
    custom_rules:
        description:
        - Describes custom rules inside the policy.
        type: list
        suboptions:
            name:
                description:
                - Gets name of the resource that is unique within a policy. This name can be used to access the resource.
                type: str
            priority:
                description:
                - Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
                required: true
                type: int
            rule_type:
                description:
                - Describes type of rule.
                required: true
                type: str
                choices:
                - match_rule
                - invalid
            match_conditions:
                description:
                - List of match conditions.
                required: true
                type: list
                suboptions:
                    match_variables:
                        description:
                        - List of match variables.
                        required: true
                        type: list
                        suboptions:
                            variable_name:
                                description:
                                - Match Variable.
                                required: true
                                type: str
                                choices:
                                - remote_addr
                                - request_method
                                - query_string
                                - post_args
                                - request_uri
                                - request_headers
                                - request_body
                                - request_cookies
                            selector:
                                description:
                                - Describes field of the matchVariable collection.
                                type: str
                    operator:
                        description:
                        - Describes operator to be matched.
                        required: true
                        type: str
                        choices:
                        - ip_match
                        - equal
                        - contains
                        - less_than
                        - greater_than
                        - less_than_or_equal
                        - greater_than_or_equal
                        - begins_with
                        - ends_with
                        - regex
                    negation_conditon:
                        description:
                        - Describes if this is negate condition or not.
                        type: bool
                    match_values:
                        description:
                        - Match value.
                        required: true
                        type: list
            action:
                description:
                - Type of Actions.
                required: true
                type: str
                choices:
                - allow
                - block
                - log
    policy_settings:
        description:
        - Describes policySettings for policy.
        type: dict
        suboptions:
            enabled_state:
                description:
                - Describes if the policy is in enabled state or disabled state.
                default: disabled
                type: str
                choices:
                - disabled
                - enabled
            mode:
                description:
                - Describes if it is in detection mode or prevention mode at policy level.
                default: prevention
                type: str
                choices:
                - prevention
                - detection
    state:
        description:
        - Assert the state of the Web Application Firewall Policy.
        - Use 'present' to create or update a Web Application Firewall Policy and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure
    - azure_tags

author:
    - audevbot
'''


RETURN = '''
id:
    description:
    - Resource ID.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import normalize_location_name
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.network import NetworkManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMWebApplicationFirewallPolicy(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Web Application Firewall Policy resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            location=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            custom_rules=dict(
                type='list',
                elements='dict',
                options=dict(
                    name=dict(
                        type='str'
                    ),
                    priority=dict(
                        required=True,
                        type='int'
                    ),
                    rule_type=dict(
                        required=True,
                        type='str',
                        choices=['match_rule', 'invalid']
                    ),
                    match_conditions=dict(
                        required=True,
                        type='list',
                        elements='dict',
                        options=dict(
                            match_variables=dict(
                                required=True,
                                type='list',
                                elements='dict',
                                options=dict(
                                    variable_name=dict(
                                        required=True,
                                        type='str',
                                        choices=['remote_addr', 'request_method', 'query_string', 'post_args', 'request_uri', 'request_headers', 'request_body', 'request_cookies']
                                    ),
                                    selector=dict(
                                        type='str'
                                    )
                                )
                            ),
                            operator=dict(
                                required=True,
                                type='str',
                                choices=['ip_match', 'equal', 'contains', 'less_than', 'greater_than', 'less_than_or_equal', 'greater_than_or_equal', 'begins_with', 'ends_with', 'regex']
                            ),
                            negation_conditon=dict(
                                type='bool'
                            ),
                            match_values=dict(
                                required=True,
                                type='list',
                                elements='str'
                            )
                        )
                    ),
                    action=dict(
                        required=True,
                        type='str',
                        choices=['allow', 'block', 'log']
                    )
                )
            ),
            policy_settings=dict(
                type='dict',
                options=dict(
                    enabled_state=dict(
                        default='disabled',
                        type='str',
                        choices=['disabled', 'enabled']
                    ),
                    mode=dict(
                        default='prevention',
                        type='str',
                        choices=['prevention', 'detection']
                    )
                )
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.name = None
        self.parameters = dict()
        self.tags = None

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMWebApplicationFirewallPolicy, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                                  supports_check_mode=True,
                                                                  supports_tags=True)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.parameters[key] = kwargs[key]

        resource_group = self.get_resource_group(self.resource_group)
        if self.parameters.get('location') is None:
            self.parameters['location'] = resource_group.location
        if self.parameters.get('custom_rules') is not None:
            self.parameters['custom_rules']['rule_type'] = _snake_to_camel(self.parameters['custom_rules']['rule_type'], True)
            if self.parameters['custom_rules'].get('match_conditions') is not None:
                if self.parameters['custom_rules']['match_conditions'].get('match_variables') is not None:
                    self.parameters['custom_rules']['match_conditions']['match_variables']['variable_name'] = _snake_to_camel(self.parameters['custom_rules']['match_conditions']['match_variables']['variable_name'], True)
                self.parameters['custom_rules']['match_conditions']['operator'] = _snake_to_camel(self.parameters['custom_rules']['match_conditions']['operator'], True)
            self.parameters['custom_rules']['action'] = _snake_to_camel(self.parameters['custom_rules']['action'], True)
        if self.parameters.get('policy_settings') is not None:
            self.parameters['policy_settings']['enabled_state'] = _snake_to_camel(self.parameters['policy_settings']['enabled_state'], True)
            self.parameters['policy_settings']['mode'] = _snake_to_camel(self.parameters['policy_settings']['mode'], True)

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(NetworkManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_webapplicationfirewallpolicy()

        if not old_response:
            self.log("Web Application Firewall Policy instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Web Application Firewall Policy instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.parameters
                if not self.idempotency_check(old_response, self.parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Web Application Firewall Policy instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_webapplicationfirewallpolicy()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Web Application Firewall Policy instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_webapplicationfirewallpolicy()
        else:
            self.log("Web Application Firewall Policy instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'id': response.get('id', None)
            })
        return self.results

    def create_update_webapplicationfirewallpolicy(self):
        '''
        Creates or updates Web Application Firewall Policy with the specified configuration.

        :return: deserialized Web Application Firewall Policy instance state dictionary
        '''
        self.log("Creating / Updating the Web Application Firewall Policy instance {0}".format(self.name))

        try:
            response = self.mgmt_client.web_application_firewall_policies.create_or_update(resource_group_name=self.resource_group,
                                                                                           policy_name=self.name,
                                                                                           parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Web Application Firewall Policy instance.')
            self.fail("Error creating the Web Application Firewall Policy instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_webapplicationfirewallpolicy(self):
        '''
        Deletes specified Web Application Firewall Policy instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Web Application Firewall Policy instance {0}".format(self.name))
        try:
            response = self.mgmt_client.web_application_firewall_policies.delete(resource_group_name=self.resource_group,
                                                                                 policy_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Web Application Firewall Policy instance.')
            self.fail("Error deleting the Web Application Firewall Policy instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_webapplicationfirewallpolicy(self):
        '''
        Gets the properties of the specified Web Application Firewall Policy
        :return: deserialized Web Application Firewall Policy instance state dictionary
        '''
        self.log("Checking if the Web Application Firewall Policy instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.web_application_firewall_policies.get(resource_group_name=self.resource_group,
                                                                              policy_name=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Web Application Firewall Policy instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Web Application Firewall Policy instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMWebApplicationFirewallPolicy()


if __name__ == '__main__':
    main()
