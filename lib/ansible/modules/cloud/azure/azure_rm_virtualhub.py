#!/usr/bin/python
#
# Copyright (C) 2019 audevbot
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_virtualhub
version_added: "2.9"
short_description: Manage Azure VirtualHub instance.
description:
    - Create, update and delete instance of Azure Virtual Hub.

options:
    resource_group:
        description:
        - The resource group name of the VirtualHub.
        required: true
        type: str
    name:
        description:
        - The name of the VirtualHub.
        required: true
        type: str
    location:
        description:
        - Resource location.
        type: str
    address_prefix:
        description:
        - Address-prefix for this VirtualHub.
        type: str
    express_route_gateway:
        description:
        - The expressRouteGateway associated with this VirtualHub.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
    p2svpn_gateway:
        description:
        - The P2SVpnGateway associated with this VirtualHub.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
    route_table:
        description:
        - The routeTable associated with this virtual hub.
        type: dict
        suboptions:
            routes:
                description:
                - List of all routes.
                type: list
                suboptions:
                    address_prefixes:
                        description:
                        - List of all addressPrefixes.
                        type: list
                    next_hop_ip_address:
                        description:
                        - NextHop ip address.
                        type: str
    virtual_network_connections:
        description:
        - List of all vnet connections with this VirtualHub.
        type: list
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
            remote_virtual_network:
                description:
                - Reference to the remote virtual network.
                type: dict
                suboptions:
                    id:
                        description:
                        - Resource ID.
                        type: str
            allow_hub_to_remote_vnet_transit:
                description:
                - VirtualHub to RemoteVnet transit to enabled or not.
                type: bool
            allow_remote_vnet_to_use_hub_vnet_gateways:
                description:
                - Allow RemoteVnet to use Virtual Hub's gateways.
                type: bool
            enable_internet_security:
                description:
                - Enable internet security.
                type: bool
            name:
                description:
                - The name of the resource that is unique within a resource group. This name can be used to access the resource.
                type: str
    virtual_wan:
        description:
        - The VirtualWAN to which the VirtualHub belongs.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
    vpn_gateway:
        description:
        - The VpnGateway associated with this VirtualHub.
        type: dict
        suboptions:
            id:
                description:
                - Resource ID.
                type: str
    state:
        description:
        - Assert the state of the Virtual Hub.
        - Use 'present' to create or update a Virtual Hub and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure
    - azure_tags

author:
    - audevbot
'''


RETURN = '''
provisioning_state:
    description:
    - The provisioning state of the resource.
    returned: always
    type: str
type:
    description:
    - Resource type.
    returned: always
    type: str
etag:
    description:
    - Gets a unique read-only string that changes whenever the resource is updated.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import normalize_location_name
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.network import NetworkManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMVirtualHub(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Virtual Hub resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            location=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            address_prefix=dict(
                type='str'
            ),
            express_route_gateway=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    )
                )
            ),
            p2svpn_gateway=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    )
                )
            ),
            route_table=dict(
                type='dict',
                options=dict(
                    routes=dict(
                        type='list',
                        elements='dict',
                        options=dict(
                            address_prefixes=dict(
                                type='list',
                                elements='str'
                            ),
                            next_hop_ip_address=dict(
                                type='str'
                            )
                        )
                    )
                )
            ),
            virtual_network_connections=dict(
                type='list',
                elements='dict',
                options=dict(
                    id=dict(
                        type='str'
                    ),
                    remote_virtual_network=dict(
                        type='dict',
                        options=dict(
                            id=dict(
                                type='str'
                            )
                        )
                    ),
                    allow_hub_to_remote_vnet_transit=dict(
                        type='bool'
                    ),
                    allow_remote_vnet_to_use_hub_vnet_gateways=dict(
                        type='bool'
                    ),
                    enable_internet_security=dict(
                        type='bool'
                    ),
                    name=dict(
                        type='str'
                    )
                )
            ),
            virtual_wan=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    )
                )
            ),
            vpn_gateway=dict(
                type='dict',
                options=dict(
                    id=dict(
                        type='str'
                    )
                )
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.name = None
        self.virtual_hub_parameters = dict()
        self.tags = None

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMVirtualHub, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                supports_check_mode=True,
                                                supports_tags=True)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.virtual_hub_parameters[key] = kwargs[key]

        resource_group = self.get_resource_group(self.resource_group)
        if self.virtual_hub_parameters.get('location') is None:
            self.virtual_hub_parameters['location'] = resource_group.location

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(NetworkManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_virtualhub()

        if not old_response:
            self.log("Virtual Hub instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Virtual Hub instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.virtual_hub_parameters
                if not self.idempotency_check(old_response, self.virtual_hub_parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Virtual Hub instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_virtualhub()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Virtual Hub instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_virtualhub()
        else:
            self.log("Virtual Hub instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'provisioning_state': response.get('provisioning_state', None),
                'type': response.get('type', None),
                'etag': response.get('etag', None)
            })
        return self.results

    def create_update_virtualhub(self):
        '''
        Creates or updates Virtual Hub with the specified configuration.

        :return: deserialized Virtual Hub instance state dictionary
        '''
        self.log("Creating / Updating the Virtual Hub instance {0}".format(self.name))

        try:
            response = self.mgmt_client.virtual_hubs.create_or_update(resource_group_name=self.resource_group,
                                                                      virtual_hub_name=self.name,
                                                                      virtual_hub_parameters=self.virtual_hub_parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Virtual Hub instance.')
            self.fail("Error creating the Virtual Hub instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_virtualhub(self):
        '''
        Deletes specified Virtual Hub instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Virtual Hub instance {0}".format(self.name))
        try:
            response = self.mgmt_client.virtual_hubs.delete(resource_group_name=self.resource_group,
                                                            virtual_hub_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Virtual Hub instance.')
            self.fail("Error deleting the Virtual Hub instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_virtualhub(self):
        '''
        Gets the properties of the specified Virtual Hub
        :return: deserialized Virtual Hub instance state dictionary
        '''
        self.log("Checking if the Virtual Hub instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.virtual_hubs.get(resource_group_name=self.resource_group,
                                                         virtual_hub_name=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Virtual Hub instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Virtual Hub instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMVirtualHub()


if __name__ == '__main__':
    main()
