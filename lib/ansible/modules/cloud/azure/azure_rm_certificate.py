#!/usr/bin/python
#
# Copyright (C) 2019 audevbot
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_certificate
version_added: "2.9"
short_description: Manage Azure Certificate instance.
description:
    - Create, update and delete instance of Azure Certificate.

options:
    resource_group:
        description:
        - The name of the resource group that contains the Batch account.
        required: true
        type: str
    account_name:
        description:
        - The name of the Batch account.
        required: true
        type: str
    certificate_name:
        description:
        - "The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate
          data in the request. For example SHA1-a3d1c5."
        required: true
        type: str
    data:
        description:
        - The maximum size is 10KB.
        required: true
        type: str
    format:
        description:
        - The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
        default: pfx
        type: str
        choices:
        - pfx
        - cer
    password:
        description:
        - This is required if the certificate format is pfx and must be omitted if the certificate format is cer.
        type: str
    thumbprint:
        description:
        - This must match the thumbprint from the name.
        type: str
    thumbprint_algorithm:
        description:
        - This must match the first portion of the certificate name. Currently required to be 'SHA1'.
        type: str
    state:
        description:
        - Assert the state of the Certificate.
        - Use 'present' to create or update a Certificate and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure

author:
    - audevbot
'''


RETURN = '''
provisioning_state_transition_time:
    description: []
    returned: always
    type: str
previous_provisioning_state:
    description:
    - The previous provisioned state of the resource.
    returned: always
    type: str
previous_provisioning_state_transition_time:
    description: []
    returned: always
    type: str
public_data:
    description:
    - The public key of the certificate.
    returned: always
    type: str
delete_certificate_error:
    description:
    - This is only returned when the certificate provisioningState is 'Failed'.
    returned: always
    type: complex
    contains:
        code:
            description:
            - An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
            returned: always
            type: str
        message:
            description:
            - A message describing the error, intended to be suitable for display in a user interface.
            returned: always
            type: str
        target:
            description:
            - The target of the particular error. For example, the name of the property in error.
            returned: always
            type: str
        details:
            description:
            - A list of additional details about the error.
            returned: always
            type: complex
            contains:
                code:
                    description:
                    - An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
                    returned: always
                    type: str
                message:
                    description:
                    - A message describing the error, intended to be suitable for display in a user interface.
                    returned: always
                    type: str
                target:
                    description:
                    - The target of the particular error. For example, the name of the property in error.
                    returned: always
                    type: str
                details:
                    description:
                    - A list of additional details about the error.
                    returned: always
                    type: complex
                    contains:
                        code:
                            description:
                            - An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
                            returned: always
                            type: str
                        message:
                            description:
                            - A message describing the error, intended to be suitable for display in a user interface.
                            returned: always
                            type: str
                        target:
                            description:
                            - The target of the particular error. For example, the name of the property in error.
                            returned: always
                            type: str
id:
    description:
    - The ID of the resource.
    returned: always
    type: str
etag:
    description:
    - The ETag of the resource, used for concurrency statements.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.batch import BatchManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMCertificate(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Certificate resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            account_name=dict(
                required=True,
                type='str',
                updatable=False,
                disposition='/'
            ),
            certificate_name=dict(
                required=True,
                type='str',
                updatable=False,
                disposition='/'
            ),
            data=dict(
                required=True,
                type='str'
            ),
            format=dict(
                default='pfx',
                type='str',
                choices=['pfx', 'cer']
            ),
            password=dict(
                type='str'
            ),
            thumbprint=dict(
                type='str'
            ),
            thumbprint_algorithm=dict(
                type='str'
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.account_name = None
        self.certificate_name = None
        self.parameters = dict()

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMCertificate, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                 supports_check_mode=True,
                                                 supports_tags=False)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()):
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.parameters[key] = kwargs[key]

        self.parameters['format'] = _snake_to_camel(self.parameters['format'], True)

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(BatchManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_certificate()

        if not old_response:
            self.log("Certificate instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Certificate instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.parameters
                if not self.idempotency_check(old_response, self.parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Certificate instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_certificate()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Certificate instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_certificate()
        else:
            self.log("Certificate instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'provisioning_state_transition_time': response.get('provisioning_state_transition_time', None),
                'previous_provisioning_state': response.get('previous_provisioning_state', None),
                'previous_provisioning_state_transition_time': response.get('previous_provisioning_state_transition_time', None),
                'public_data': response.get('public_data', None),
                'delete_certificate_error': response.get('delete_certificate_error', None),
                'id': response.get('id', None),
                'etag': response.get('etag', None)
            })
        return self.results

    def create_update_certificate(self):
        '''
        Creates or updates Certificate with the specified configuration.

        :return: deserialized Certificate instance state dictionary
        '''
        self.log("Creating / Updating the Certificate instance {0}".format(self.name))

        try:
            if self.to_do == Actions.Create:
                response = self.mgmt_client.certificate.create(resource_group_name=self.resource_group,
                                                               account_name=self.account_name,
                                                               certificate_name=self.certificate_name,
                                                               parameters=self.parameters)
            else:
                response = self.mgmt_client.certificate.update(resource_group_name=self.resource_group,
                                                               account_name=self.account_name,
                                                               certificate_name=self.certificate_name,
                                                               parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Certificate instance.')
            self.fail("Error creating the Certificate instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_certificate(self):
        '''
        Deletes specified Certificate instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Certificate instance {0}".format(self.name))
        try:
            response = self.mgmt_client.certificate.delete(resource_group_name=self.resource_group,
                                                           account_name=self.account_name,
                                                           certificate_name=self.certificate_name)
        except CloudError as e:
            self.log('Error attempting to delete the Certificate instance.')
            self.fail("Error deleting the Certificate instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_certificate(self):
        '''
        Gets the properties of the specified Certificate
        :return: deserialized Certificate instance state dictionary
        '''
        self.log("Checking if the Certificate instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.certificate.get(resource_group_name=self.resource_group,
                                                        account_name=self.account_name,
                                                        certificate_name=self.certificate_name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Certificate instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Certificate instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMCertificate()


if __name__ == '__main__':
    main()
