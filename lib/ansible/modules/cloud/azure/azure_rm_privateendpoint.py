#!/usr/bin/python
#
# Copyright (C) 2019 audevbot
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_privateendpoint
version_added: "2.9"
short_description: Manage Azure PrivateEndpoint instance.
description:
    - Create, update and delete instance of Azure Private Endpoint.

options:
    resource_group:
        description:
        - The name of the resource group.
        required: true
        type: str
    name:
        description:
        - The name of the private endpoint.
        required: true
        type: str
    location:
        description:
        - Resource location.
        type: str
    etag:
        description:
        - A unique read-only string that changes whenever the resource is updated.
        type: str
    manual_private_link_service_connections:
        description:
        - "A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve
          connections to the remote resource."
        type: list
        suboptions:
            private_link_service_id:
                description:
                - The resource id of private link service.
                - It can be the TBD name which is in the same resource group.
                - "It can be the TBD ID. e.g., /subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group
                  }}/providers/Microsoft.Network/privateLinkServices/{{ name }}."
                - It can be a dict which contains C(name) and C(resource_group) of the TBD.
                required: true
                type: raw
            group_ids:
                description:
                - The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
                type: list
            request_message:
                description:
                - A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
                type: str
            name:
                description:
                - The name of the resource that is unique within a resource group. This name can be used to access the resource.
                required: true
                type: str
    private_link_service_connections:
        description:
        - A grouping of information about the connection to the remote resource.
        type: list
        suboptions:
            private_link_service_id:
                description:
                - The resource id of private link service.
                - It can be the TBD name which is in the same resource group.
                - "It can be the TBD ID. e.g., /subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group
                  }}/providers/Microsoft.Network/privateLinkServices/{{ name }}."
                - It can be a dict which contains C(name) and C(resource_group) of the TBD.
                required: true
                type: raw
            group_ids:
                description:
                - The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
                type: list
            request_message:
                description:
                - A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
                type: str
            name:
                description:
                - The name of the resource that is unique within a resource group. This name can be used to access the resource.
                required: true
                type: str
    subnet_id:
        description:
        - The ID of the subnet from which the private IP will be allocated.
        - It can be the TBD name which is in the same resource group.
        - "It can be the TBD ID. e.g., /subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group
          }}/providers/Microsoft.Network/virtualNetworks/{{ virtual_network_name }}/subnets/{{ name }}."
        - It can be a dict which contains C(name) and C(resource_group) of the TBD.
        required: true
        type: raw
    state:
        description:
        - Assert the state of the Private Endpoint.
        - Use 'present' to create or update a Private Endpoint and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure
    - azure_tags

author:
    - audevbot
'''


RETURN = '''
network_interfaces:
    description:
    - Gets an array of references to the network interfaces created for this private endpoint.
    returned: always
    type: complex
    contains:
        id:
            description:
            - Resource ID.
            returned: always
            type: str
type:
    description:
    - Resource type.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import normalize_location_name
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.network import NetworkManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMPrivateEndpoint(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Private Endpoint resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            location=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            etag=dict(
                type='str',
                updatable=False,
                disposition='/'
            ),
            manual_private_link_service_connections=dict(
                type='list',
                elements='dict',
                options=dict(
                    private_link_service_id=dict(
                        required=True,
                        type='raw'
                    ),
                    group_ids=dict(
                        type='list',
                        elements='str'
                    ),
                    request_message=dict(
                        type='str'
                    ),
                    name=dict(
                        required=True,
                        type='str'
                    ),
                    private_link_service_connection_state=dict(
                        type='dict',
                        options=dict(
                            status=dict(
                                type='str'
                            ),
                            description=dict(
                                type='str'
                            ),
                            action_required=dict(
                                type='str'
                            )
                        )
                    )
                )
            ),
            private_link_service_connections=dict(
                type='list',
                elements='dict',
                options=dict(
                    private_link_service_id=dict(
                        required=True,
                        type='raw'
                    ),
                    group_ids=dict(
                        type='list',
                        elements='str'
                    ),
                    request_message=dict(
                        type='str'
                    ),
                    name=dict(
                        required=True,
                        type='str'
                    ),
                    private_link_service_connection_state=dict(
                        type='dict',
                        options=dict(
                            status=dict(
                                type='str'
                            ),
                            description=dict(
                                type='str'
                            ),
                            action_required=dict(
                                type='str'
                            )
                        )
                    )
                )
            ),
            subnet_id=dict(
                required=True,
                type='raw'
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.name = None
        self.parameters = dict()
        self.tags = None

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMPrivateEndpoint, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                     supports_check_mode=True,
                                                     supports_tags=True)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.parameters[key] = kwargs[key]

        resource_group = self.get_resource_group(self.resource_group)
        if self.parameters.get('location') is None:
            self.parameters['location'] = resource_group.location
        if self.parameters.get('manual_private_link_service_connections') is not None:
            self.parameters['manual_private_link_service_connections']['private_link_service_id'] = self.normalize_resource_id(
                self.parameters['manual_private_link_service_connections']['private_link_service_id'],
                '/subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group }}/providers/Microsoft.Network/privateLinkServices/{{ name }}')
        if self.parameters.get('private_link_service_connections') is not None:
            self.parameters['private_link_service_connections']['private_link_service_id'] = self.normalize_resource_id(
                self.parameters['private_link_service_connections']['private_link_service_id'],
                '/subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group }}/providers/Microsoft.Network/privateLinkServices/{{ name }}')
        self.parameters['subnet'] = {
            'id': self.normalize_resource_id(
                self.parameters.pop('subnet_id'),
                '/subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group }}/providers/Microsoft.Network/virtualNetworks/{{ virtual_network_name }}/subnets/{{ name }}')
        }

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(NetworkManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_privateendpoint()

        if not old_response:
            self.log("Private Endpoint instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Private Endpoint instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.parameters
                if not self.idempotency_check(old_response, self.parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Private Endpoint instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_privateendpoint()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Private Endpoint instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_privateendpoint()
        else:
            self.log("Private Endpoint instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
                'network_interfaces': response.get('network_interfaces', None),
                'type': response.get('type', None)
            })
        return self.results

    def create_update_privateendpoint(self):
        '''
        Creates or updates Private Endpoint with the specified configuration.

        :return: deserialized Private Endpoint instance state dictionary
        '''
        self.log("Creating / Updating the Private Endpoint instance {0}".format(self.name))

        try:
            response = self.mgmt_client.private_endpoints.create_or_update(resource_group_name=self.resource_group,
                                                                           private_endpoint_name=self.name,
                                                                           parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Private Endpoint instance.')
            self.fail("Error creating the Private Endpoint instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_privateendpoint(self):
        '''
        Deletes specified Private Endpoint instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Private Endpoint instance {0}".format(self.name))
        try:
            response = self.mgmt_client.private_endpoints.delete(resource_group_name=self.resource_group,
                                                                 private_endpoint_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Private Endpoint instance.')
            self.fail("Error deleting the Private Endpoint instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_privateendpoint(self):
        '''
        Gets the properties of the specified Private Endpoint
        :return: deserialized Private Endpoint instance state dictionary
        '''
        self.log("Checking if the Private Endpoint instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.private_endpoints.get(resource_group_name=self.resource_group,
                                                              private_endpoint_name=self.name,
                                                              =self.)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Private Endpoint instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Private Endpoint instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMPrivateEndpoint()


if __name__ == '__main__':
    main()
